package com.example.tryggaklassenpod.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Card
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tryggaklassenpod.R
import com.example.tryggaklassenpod.dataClasses.Comments
import com.example.tryggaklassenpod.dataClasses.episodesList
import android.widget.Toast
import androidx.compose.foundation.BorderStroke
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.OutlinedCard
import androidx.compose.ui.text.style.TextAlign
import com.example.tryggaklassenpod.helperFunctions.getCreatedAtAsDate
import com.example.tryggaklassenpod.helperFunctions.getCreatedAtFormatted
import java.util.Locale.filter

@Composable
fun CommentsSection(comments: List<Comments>) {

    val approvedComments = comments.filter{ it.approved == true }.size
    var isShowing by remember { mutableStateOf(true)}
    /* TODO: CHANGE TO FALSE */

    Column(
        modifier = Modifier.padding(4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 8.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Start
        ) {
            Text(
                text = if (approvedComments == 1) "$approvedComments Comment" else "$approvedComments Comments",
                style = MaterialTheme.typography.headlineSmall,
            )
            Column(
                modifier = Modifier.width(55.dp),
                horizontalAlignment = Alignment.End
            ) {
                Text(
                    text = if (isShowing) "Hide" else "Show",
                    modifier = Modifier
                        .padding(top = 4.dp, start = 8.dp)
                        .clickable { isShowing = !isShowing },
                )
            }
            Column {
                Icon(
                    painter = if (isShowing) {
                        painterResource(R.drawable.expand_less)
                    } else {
                        painterResource(R.drawable.expand_more)
                    },
                    contentDescription = stringResource(R.string.expand_comments),
                    modifier = Modifier
                        .padding(top = 6.dp)
                        .size(20.dp)
                        .clickable { isShowing = !isShowing },
                    tint = MaterialTheme.colorScheme.secondary,
                )
            }
        }

        // 2. At the bottom add field to write a new comment
        // 3. autogenerated names
        // 4. when submitted, toast the user!!
        if (isShowing) {
            CommentsList(comments = comments)
        }

        WriteComment()

    }
}

@Composable
fun CommentsList(comments: List<Comments>) {
    for (comment in comments) {
        if (comment?.approved!!){
            CommentCard(comment = comment)
        }
    }
}

@Composable
fun CommentCard(comment: Comments) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
    ) {
        Column {
            Icon(
                painter = painterResource(id = R.drawable.person),
                contentDescription = stringResource(R.string.placeholder_comments),
                modifier = Modifier
                    .size(40.dp)
                    .padding(end = 4.dp),
                tint = MaterialTheme.colorScheme.secondary
            )
        }
        Column {
            comment.author?.let {
                Text(
                    text = it,
                    color = MaterialTheme.colorScheme.primary,
                    style = MaterialTheme.typography.bodyLarge
                )
            }
            comment.createdAt?.let {
                Text(
                    text = it.getCreatedAtFormatted(),
                    color = MaterialTheme.colorScheme.secondary,
                    style = MaterialTheme.typography.bodySmall,
                )
            }
            comment.comment?.let {
                Text(
                    text = it,
                    modifier = Modifier.padding(top = 4.dp, bottom = 4.dp)
                )
            }
        }
    }
}

@Composable
fun WriteComment() {

}


@Preview(showBackground = true)
@Composable
fun CommentsCardPreview() {
    val comments = episodesList[0]?.comments
    val comment = comments?.get(0)
    if (comment != null) {
        CommentCard(comment)
    }
}

@Preview(showSystemUi = true, showBackground = true)
@Composable
fun CommentsSectionPreview() {
    val comments = episodesList[0]?.comments
    if (comments != null) {
        CommentsSection(comments)
    }
}